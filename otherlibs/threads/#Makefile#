<<<<<<< HEAD
#**************************************************************************
#*                                                                        *
#*                                 OCaml                                  *
#*                                                                        *
#*            Xavier Leroy, projet Cristal, INRIA Rocquencourt            *
#*                                                                        *
#*   Copyright 1999 Institut National de Recherche en Informatique et     *
#*     en Automatique.                                                    *
#*                                                                        *
#*   All rights reserved.  This file is distributed under the terms of    *
#*   the GNU Lesser General Public License version 2.1, with the          *
#*   special exception on linking described in the file LICENSE.          *
#*                                                                        *
#**************************************************************************

# FIXME reduce redundancy by including ../Makefile

include ../../config/Makefile
include ../../Makefile.common

CAMLRUN ?= ../../boot/ocamlrun
CAMLYACC ?= ../../boot/ocamlyacc

CFLAGS += $(SHAREDCCCOMPOPTS)
CPPFLAGS += -I../../byterun

ROOTDIR=../..

include $(ROOTDIR)/config/Makefile

LIBNAME=threads

LIBS=-nostdlib -I $(ROOTDIR)/stdlib -I $(ROOTDIR)/otherlibs/$(UNIXLIB)

<<<<<<< HEAD
# Object file prefix
P=stdlib__

LIB_OBJS=$(LIB)/camlinternalFormatBasics.cmo stdlib.cmo					\
  $(LIB)/$(P)seq.cmo $(LIB)/$(P)array.cmo $(LIB)/$(P)list.cmo $(LIB)/$(P)char.cmo $(LIB)/$(P)bytes.cmo	\
  $(LIB)/$(P)string.cmo $(LIB)/$(P)sys.cmo $(LIB)/$(P)sort.cmo marshal.cmo		\
  $(LIB)/$(P)obj.cmo $(LIB)/$(P)int32.cmo $(LIB)/$(P)int64.cmo				\
  $(LIB)/$(P)nativeint.cmo $(LIB)/$(P)lexing.cmo $(LIB)/$(P)parsing.cmo			\
  $(LIB)/$(P)set.cmo $(LIB)/$(P)map.cmo $(LIB)/$(P)stack.cmo $(LIB)/$(P)queue.cmo	\
  $(LIB)/camlinternalLazy.cmo $(LIB)/$(P)lazy.cmo $(LIB)/$(P)stream.cmo			\
  $(LIB)/$(P)buffer.cmo $(LIB)/camlinternalFormat.cmo $(LIB)/$(P)printf.cmo		\
  $(LIB)/$(P)arg.cmo $(LIB)/$(P)printexc.cmo $(LIB)/$(P)gc.cmo $(LIB)/$(P)digest.cmo	\
  $(LIB)/$(P)random.cmo $(LIB)/$(P)hashtbl.cmo $(LIB)/$(P)format.cmo			\
  $(LIB)/$(P)scanf.cmo $(LIB)/$(P)callback.cmo $(LIB)/camlinternalOO.cmo		\
  $(LIB)/$(P)oo.cmo $(LIB)/camlinternalMod.cmo $(LIB)/$(P)genlex.cmo			\
  $(LIB)/$(P)weak.cmo $(LIB)/$(P)ephemeron.cmo $(LIB)/$(P)filename.cmo			\
  $(LIB)/$(P)complex.cmo $(LIB)/$(P)arrayLabels.cmo $(LIB)/$(P)listLabels.cmo		\
  $(LIB)/$(P)bytesLabels.cmo $(LIB)/$(P)stringLabels.cmo				\
  $(LIB)/$(P)atomic.cmo $(LIB)/$(P)domain.cmo \
  $(LIB)/$(P)moreLabels.cmo $(LIB)/$(P)stdLabels.cmo
=======
OCAMLRUN?=$(ROOTDIR)/boot/ocamlrun
OCAMLC=$(OCAMLRUN) $(ROOTDIR)/ocamlc $(LIBS)
OCAMLOPT=$(OCAMLRUN) $(ROOTDIR)/ocamlopt $(LIBS)
OCAMLMKLIB=$(OCAMLRUN) $(ROOTDIR)/tools/ocamlmklib
>>>>>>> 27eae2acb... Remove obsolete threads libraries.

COMPFLAGS=-w +33..39 -warn-error A -g -bin-annot -safe-string
ifeq "$(FLAMBDA)" "true"
OPTCOMPFLAGS=-O3
else
OPTCOMPFLAGS=
endif

MLFILES=thread.ml mutex.ml condition.ml event.ml
MLIFILES=thread.mli mutex.mli condition.mli event.mli

CMIFILES=$(MLIFILES:.mli=.cmi)
CMOFILES=$(MLFILES:.ml=.cmo)
CMXFILES=$(MLFILES:.ml=.cmx)

ifeq "$(UNIX_OR_WIN32)" "unix"
HEADER = externals-posix.h
else # Windows
HEADER = externals-win32.h
endif

# Note: the header on which object files produced from externals.c
# should actually depend is known for sure only at compile-time.
# That's why this dependency is handled in the Makefile directly
# and removed from the output of the C compiler during make depend

BYTECODE_C_OBJS=externals-bytecode.$(O)
NATIVECODE_C_OBJS=externals-native.$(O)

all: lib$(LIBNAME).$(A) $(LIBNAME).cma $(CMIFILES)

<<<<<<< HEAD
stdlib.cmo: stdlib.mli stdlib.cmi stdlib.ml
	$(CAMLC) ${COMPFLAGS} -nopervasives \
	  -pp "$(AWK) -f $(LIB)/expand_module_aliases.awk" -o $@ -c stdlib.ml

stdlib.mli: $(LIB)/stdlib.mli
	ln -s $(LIB)/stdlib.mli stdlib.mli

stdlib.cmi: $(LIB)/stdlib.cmi
	rm -f stdlib.cmi
	ln -s $(LIB)/stdlib.cmi stdlib.cmi

$(P)marshal.cmo: marshal.mli $(P)marshal.cmi marshal.ml
	$(CAMLC) ${COMPFLAGS} -o$@ -c marshal.ml
=======
allopt: lib$(LIBNAME)nat.$(A) $(LIBNAME).cmxa $(CMIFILES)

lib$(LIBNAME).$(A): $(BYTECODE_C_OBJS)
	$(OCAMLMKLIB) -o $(LIBNAME) $(BYTECODE_C_OBJS) $(PTHREAD_LINK)

lib$(LIBNAME)nat.$(A): $(NATIVECODE_C_OBJS)
	$(OCAMLMKLIB) -o $(LIBNAME)nat $^

$(LIBNAME).cma: $(CMOFILES)
ifeq "$(UNIX_OR_WIN32)" "unix"
	$(OCAMLMKLIB) -o $(LIBNAME) -ocamlc '$(OCAMLC)' -cclib -lunix -linkall $(PTHREAD_CAML_LINK) $^
# TODO: Figure out why -cclib -lunix is used here.
# It may be because of the threadsUnix module which is deprecated.
# It may hence be good to figure out whether this module shouldn't be
# removed, and then -cclib -lunix arguments.
else # Windows
	$(OCAMLMKLIB) -o $(LIBNAME) -ocamlc "$(OCAMLC)" -linkall $(PTHREAD_CAML_LINK) $^
endif
>>>>>>> 27eae2acb... Remove obsolete threads libraries.

# See remark above: force static linking of lib$(LIBNAME)nat.a
$(LIBNAME).cmxa: $(CMXFILES)
	$(OCAMLOPT) -linkall -a -cclib -l$(LIBNAME)nat $(PTHREAD_CAML_LINK) -o $@ $^

<<<<<<< HEAD
$(P)marshal.cmi: $(LIB)/$(P)marshal.cmi
	ln -s $(LIB)/$(P)marshal.cmi $(P)marshal.cmi
=======
# Note: I removed "-cclib -lunix" from the line above.
# Indeed, if we link threads.cmxa, then we must also link unix.cmxa,
# which itself will pass -lunix to the C linker.  It seems more
# modular to me this way. -- Alain
>>>>>>> 27eae2acb... Remove obsolete threads libraries.

# The following lines produce two object files externals-bytecode.$(O) and
# externals-native.$(O) from the same source file externals.c (it is compiled
# twice, each time with different options).

externals-bytecode.$(O): externals.c $(HEADER)
	$(CC) -c $(CFLAGS) $(CPPFLAGS) -I$(ROOTDIR)/byterun  \
	  $(SHAREDCCCOMPOPTS) $(OUTPUTOBJ)$@ $<

externals-native.$(O): externals.c $(HEADER)
	$(CC) $(CFLAGS) $(CPPFLAGS) -I$(ROOTDIR)/asmrun -I$(ROOTDIR)/byterun \
	  $(SHAREDCCCOMPOPTS) -DNATIVE_CODE \
	  -DTARGET_$(ARCH) -DMODEL_$(MODEL) -DSYS_$(SYSTEM) \
	  $(OUTPUTOBJ)$@ -c $<

partialclean:
	rm -f *.cm*

clean: partialclean
<<<<<<< HEAD
	rm -f libvmthreads.a dllvmthreads.so *.o
	rm -f stdlib.mli marshal.mli unix.mli
=======
	rm -f dll$(LIBNAME)*$(EXT_DLL) *.$(A) *.$(O)

INSTALL_LIBDIR=$(DESTDIR)$(LIBDIR)
THREADS_LIBDIR=$(INSTALL_LIBDIR)/$(LIBNAME)
INSTALL_STUBLIBDIR=$(DESTDIR)$(STUBLIBDIR)
>>>>>>> 27eae2acb... Remove obsolete threads libraries.

install:
<<<<<<< HEAD
	if test -f dllvmthreads.so; then \
	  $(INSTALL_PROG) dllvmthreads.so "$(INSTALL_STUBLIBDIR)"; \
	fi
	mkdir -p "$(INSTALL_LIBDIR)/vmthreads"
	$(INSTALL_DATA) libvmthreads.a "$(INSTALL_LIBDIR)/vmthreads"
	cd "$(INSTALL_LIBDIR)/vmthreads"; $(RANLIB) libvmthreads.a
	$(INSTALL_DATA) \
	  $(CMIFILES) $(CMIFILES:.cmi=.mli) $(CMIFILES:.cmi=.cmti) \
	  threads.cma stdlib.cma unix.cma \
	  "$(INSTALL_LIBDIR)/vmthreads"
=======
	if test -f dll$(LIBNAME)$(EXT_DLL); then \
	  cp dll$(LIBNAME)$(EXT_DLL) "$(INSTALL_STUBLIBDIR)/dll$(LIBNAME)$(EXT_DLL)"; fi
	cp lib$(LIBNAME).$(A) "$(INSTALL_LIBDIR)"
	cd "$(INSTALL_LIBDIR)"; $(RANLIB) lib$(LIBNAME).$(A)
	mkdir -p "$(THREADS_LIBDIR)"
	cp $(CMIFILES) $(CMIFILES:.cmi=.cmti) $(LIBNAME).cma "$(THREADS_LIBDIR)"
	cp $(MLIFILES) "$(INSTALL_LIBDIR)"
	cp threads.h "$(INSTALL_LIBDIR)/caml"
>>>>>>> 27eae2acb... Remove obsolete threads libraries.

installopt:
	cp lib$(LIBNAME)nat.$(A) "$(INSTALL_LIBDIR)"
	cd "$(INSTALL_LIBDIR)"; $(RANLIB) lib$(LIBNAME)nat.$(A)
	cp $(CMXFILES) $(LIBNAME).cmxa $(LIBNAME).$(A) "$(THREADS_LIBDIR)"
	cd "$(THREADS_LIBDIR)" && $(RANLIB) $(LIBNAME).$(A)

.SUFFIXES: .ml .mli .cmo .cmi .cmx

.mli.cmi:
	$(OCAMLC) -c $(COMPFLAGS) $<

.ml.cmo:
	$(OCAMLC) -c $(COMPFLAGS) $<

.ml.cmx:
	$(OCAMLOPT) -c $(COMPFLAGS) $(OPTCOMPFLAGS) $<

.PHONY: depend
ifeq "$(TOOLCHAIN)" "msvc"
depend:
	$(error Dependencies cannot be regenerated using the MSVC ports)
else
depend:
	$(CC) -MM $(CPPFLAGS) -I$(ROOTDIR)/byterun externals.c \
	  | sed -e 's/externals\.o/externals-bytecode.$$(O)/' \
	  -e 's/ st_\(posix\|win32\)\.h//g' > .depend
	$(CC) -MM $(CPPFLAGS) -I$(ROOTDIR)/asmrun -I$(ROOTDIR)/byterun \
	  -DNATIVE_CODE -DTARGET_$(ARCH) -DMODEL_$(MODEL) -DSYS_$(SYSTEM) \
	  externals.c | sed -e 's/externals\.o/externals-native.$$(O)/' \
	  -e 's/ st_\(posix\|win32\)\.h//g' >> .depend
	$(CAMLRUN) ../../tools/ocamldep -slash *.mli *.ml >> .depend
endif

include .depend
